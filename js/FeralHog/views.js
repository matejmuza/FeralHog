// Generated by CoffeeScript 1.5.0
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if ((_ref = this.FeralHog) == null) {
    this.FeralHog = {};
  }

  FeralHog.ObservationInfoView = (function(_super) {

    __extends(ObservationInfoView, _super);

    function ObservationInfoView() {
      this.formatDate = __bind(this.formatDate, this);
      this.destroy = __bind(this.destroy, this);
      ObservationInfoView.__super__.constructor.apply(this, arguments);
    }

    ObservationInfoView.prototype.initialize = function() {
      ich.grabTemplates();
      return this.render();
    };

    ObservationInfoView.prototype.el = '#observationContainer';

    ObservationInfoView.prototype.render = function(model) {
      this.$el.html(ich.observationInfo(this));
      return this.$el.show();
    };

    ObservationInfoView.prototype.destroy = function() {
      this.unbind();
      this.$el.hide();
      return this.$el.html("");
    };

    ObservationInfoView.prototype.id = function() {
      return this.model.get('observation_id') || "N/A";
    };

    ObservationInfoView.prototype.county = function() {
      return this.model.get('county') || "N/A";
    };

    ObservationInfoView.prototype.date = function() {
      return this.formatDate(new Date(this.model.get('date')));
    };

    ObservationInfoView.prototype.documented = function() {
      return this.model.get('documented') || "N/A";
    };

    ObservationInfoView.prototype.observed_adult_count = function() {
      return this.model.get('observed_adult_count') || "N/A";
    };

    ObservationInfoView.prototype.observed_piglet_count = function() {
      return this.model.get('observed_piglet_count') || "N/A";
    };

    ObservationInfoView.prototype.ownership = function() {
      return this.model.get('ownership') || "N/A";
    };

    ObservationInfoView.prototype.reporter_name = function() {
      return this.model.get('reporter_name') || "N/A";
    };

    ObservationInfoView.prototype.reporter_phone = function() {
      return this.model.get('reporter_phone') || "N/A";
    };

    ObservationInfoView.prototype.createddate = function() {
      return this.formatDate(new Date(this.model.get('createddate')));
    };

    ObservationInfoView.prototype.lastmoddate = function() {
      return this.formatDate(new Date(this.model.get('lastmoddate')));
    };

    ObservationInfoView.prototype.photos = function() {
      return this.getPhotos();
    };

    ObservationInfoView.prototype.actions = function() {
      return this.getActions();
    };

    ObservationInfoView.prototype.hasPhotos = function() {
      if (this.model.get('photos') != null) {
        return true;
      } else {
        return null;
      }
    };

    ObservationInfoView.prototype.hasActions = function() {
      if (this.model.get('actions') != null) {
        return true;
      } else {
        return null;
      }
    };

    ObservationInfoView.prototype.formatDate = function(JSdate) {
      if (JSdate) {
        return "" + (JSdate.getMonth()) + "/" + (JSdate.getDate()) + "/" + (JSdate.getFullYear());
      } else {
        return "N/A";
      }
    };

    return ObservationInfoView;

  })(Backbone.View);

  FeralHog.ObservationActionsView = (function(_super) {

    __extends(ObservationActionsView, _super);

    function ObservationActionsView() {
      this.setActionValues = __bind(this.setActionValues, this);
      this.formatDate = __bind(this.formatDate, this);
      this.getActions = __bind(this.getActions, this);
      this.destroy = __bind(this.destroy, this);
      ObservationActionsView.__super__.constructor.apply(this, arguments);
    }

    ObservationActionsView.prototype.initialize = function() {
      ich.grabTemplates();
      return this.render();
    };

    ObservationActionsView.prototype.el = '#observationContainer';

    ObservationActionsView.prototype.render = function(model) {
      this.$el.html(ich.observationActions(this));
      return this.$el.show();
    };

    ObservationActionsView.prototype.destroy = function() {
      this.unbind();
      this.$el.hide();
      return this.$el.html("");
    };

    ObservationActionsView.prototype.getActions = function() {
      var act, action, actions, i, _i, _len, _ref1;
      if (!this.model.get('actions')) {
        return null;
      }
      actions = [];
      _ref1 = this.model.get('actions');
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        act = _ref1[i];
        action = this.setActionValues(FeralHog.actions.get(act));
        action.index = i;
        action.displayIndex = i + 1;
        action.isFirst = i === 0 ? true : null;
        actions.push(action);
      }
      return actions;
    };

    ObservationActionsView.prototype.id = function() {
      return this.model.get('observation_id') || "N/A";
    };

    ObservationActionsView.prototype.actions = function() {
      return this.getActions();
    };

    ObservationActionsView.prototype.hasActions = function() {
      if (this.model.get('actions') != null) {
        return true;
      } else {
        return null;
      }
    };

    ObservationActionsView.prototype.formatDate = function(JSdate) {
      if (JSdate) {
        return "" + (JSdate.getMonth()) + "/" + (JSdate.getDate()) + "/" + (JSdate.getFullYear());
      } else {
        return "N/A";
      }
    };

    ObservationActionsView.prototype.setActionValues = function(action) {
      action.actionDate = this.formatDate(new Date(action.attributes.date));
      action.blood = function() {
        return action.attributes.blood_sample_count || "N/A";
      };
      action.collarNo = function() {
        return action.attributes.collar_serial_number || "N/A";
      };
      action.collarSex = function() {
        return action.attributes.collar_sex || "N/A";
      };
      action.lastModDate = this.formatDate(new Date(action.attributes.lastmoddate));
      action.adult = function() {
        return action.attributes.killed_adult_count || "N/A";
      };
      action.female = function() {
        return action.attributes.killed_female_count || "N/A";
      };
      action.male = function() {
        return action.attributes.killed_male_count || "N/A";
      };
      action.piglet = function() {
        return action.attributes.killed_piglet_count || "N/A";
      };
      action.comment = function() {
        return action.attributes.comment || "N/A";
      };
      action.type = function() {
        return action.attributes.type || "N/A";
      };
      action.createdDate = this.formatDate(new Date(action.attributes.createddate));
      return action;
    };

    return ObservationActionsView;

  })(Backbone.View);

  FeralHog.ObservationPhotosView = (function(_super) {

    __extends(ObservationPhotosView, _super);

    function ObservationPhotosView() {
      this.getPhotoGroups = __bind(this.getPhotoGroups, this);
      this.destroy = __bind(this.destroy, this);
      ObservationPhotosView.__super__.constructor.apply(this, arguments);
    }

    ObservationPhotosView.prototype.initialize = function() {
      ich.grabTemplates();
      return this.render();
    };

    ObservationPhotosView.prototype.el = '#observationContainer';

    ObservationPhotosView.prototype.events = {
      "click .imgA": "setActiveImg"
    };

    ObservationPhotosView.prototype.render = function(model) {
      $("#modalsContainer").html(ich.photoModals(this));
      this.$el.html(ich.observationPhotos(this));
      return this.$el.show();
    };

    ObservationPhotosView.prototype.destroy = function() {
      this.unbind();
      this.$el.hide();
      return this.$el.html("");
    };

    ObservationPhotosView.prototype.setActiveImg = function(e) {
      $("#modalPhotoCarousel div.item").removeClass("active");
      return $("#modalPhotoCarousel div.item[data-photo-index='" + ($(e.target).attr('data-photo-index')) + "']").addClass("active");
    };

    ObservationPhotosView.prototype.getPhotoGroups = function() {
      var counter, displayIndex, hasTwoItems, i, isFirst, photo, photoGroups, pht, _i, _len, _ref1;
      if (!this.model.get('photos')) {
        return null;
      }
      photoGroups = [];
      counter = 0;
      _ref1 = this.model.get('photos');
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        pht = _ref1[i];
        isFirst = i === 0 ? true : null;
        if (i % 2 === 0) {
          hasTwoItems = (counter * 2) + 2 < (this.model.get('photos').length + 1) ? true : false;
          displayIndex = hasTwoItems ? "" + ((counter * 2) + 1) + " - " + ((counter * 2) + 2) : "" + ((counter * 2) + 1);
          photoGroups.push({
            index: counter,
            hasTwoItems: hasTwoItems,
            displayIndex: displayIndex,
            photos: [],
            isFirst: isFirst
          });
          counter++;
        }
        photo = FeralHog.photos.get(pht);
        photo.photoIndex = i;
        photo.isFirst = isFirst;
        photoGroups[Math.floor(i / 2)].photos.push(photo);
      }
      return photoGroups;
    };

    ObservationPhotosView.prototype.id = function() {
      return this.model.get('observation_id') || "N/A";
    };

    ObservationPhotosView.prototype.photoGroups = function() {
      return this.getPhotoGroups();
    };

    ObservationPhotosView.prototype.hasPhotos = function() {
      if (this.model.get('photos') != null) {
        return true;
      } else {
        return null;
      }
    };

    return ObservationPhotosView;

  })(Backbone.View);

}).call(this);
